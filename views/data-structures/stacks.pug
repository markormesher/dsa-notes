extends ../_shared/page-layout

block page-body

	h1 Stacks

	ul
		li: a(href = '#implementation') Implementation
		li: a(href = '#efficiency') Efficiency
		li: a(href = '#example-basic-usage') Example: Basic Usage
		li: a(href = '/data-structures/deques') See Also: Deques

	p A stack is an ordered, linear collection that allows elements to be retrieved in a #[strong Last In, First Out (LIFO)] order. The elements that were most recently added form the #[strong &quot;top&quot;] of the stack; the elements added least recently form the #[strong &quot;bottom&quot;] of the stack.

	p Stacks have two primary operations: #[code push(e)] to add the element #[code e] to the collection, and #[code pop()] to return the element that was most recently added to the stack that has not yet been removed. An additional #[code peek()] operation may return the top element without removing it from the collection.

	h2#implementation Implementation

	p Stacks can be viewed as a specialised form of a #[a(href = '/data-structures/deques') deque] and can be built using the #[code addLast()] and #[code getLast()] methods.

	div.row
		div.col-md-6
			h3 Deque Implementation, Pseudocode

			pre: code.
				class Stack {
					Deque elements

					enqueue(e) {
						elements.addLast(e)
					}

					dequeue() {
						if elements is empty, throw error

						return elements.removeLast()
					}

					size() {
						return elements.size
					}
				}

	h2#efficiency Efficiency

	p Using either a #[a(href = '/data-structures/dynamic-arrays') dynamic array]-based or #[a(href = '/data-structures/linked-lists') doubly-linked list]-based implementation of a #[a(href = '/data-structures/deque') deque] structure, all operations can be performed in #[code O(1)].

	h2#example-basic-usage Example: Basic Usage

	div.row
		div.col-md-6
			h3 Java

			pre: code.java.
				Stack&lt;Integer&gt; intStack = new Stack&lt;&gt;();

				intStack.push(4);
				intStack.push(15);
				intStack.push(37);

				// pop: returns and removes the top element
				System.out.println(intStack.pop()); // 37
				System.out.println(intStack.pop()); // 15

				System.out.println(intStack.size()); // 1

				// peek: returns, but doesn't remove the top element
				System.out.println(intStack.peek()); // 4
				System.out.println(intStack.isEmpty()); // false

				System.out.println(intStack.pop()); // 4
				System.out.println(intStack.isEmpty()); // true

		div.col-md-6
			h3 C++

			pre: code.cpp.
				stack&lt;int&gt; intStack;

				intStack.push(4);
				intStack.push(15);
				intStack.push(37);

				// top: returns, but doesn't remove the top element
				cout << intStack.top(); // 37
				cout << intStack.top(); // 37

				// pop: removes the top element, but doesn't return it
				intStack.pop(); // stack now has 2 elements

				cout << intStack.top(); // 15
				intStack.pop(); // stack now has 1 element

				cout << intStack.top(); // 4
				cout << intStack.empty(); // false

				intStack.pop();
				cout << intStack.empty(); // true