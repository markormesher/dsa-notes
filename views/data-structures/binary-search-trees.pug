extends ../_shared/page-layout

block page-body

	h1 Binary Search Trees

	ul
		li: a(href = '#efficiency') Efficiency
		li: a(href = '#operations') Operations
		li: a(href = '#balance') Balance
		li: a(href = '/algorithms/binary-search') See Also: Binary Search
		li: a(href = '/algorithms/tree-traversals') See Also: Tree Traversals

	div.row
		div.col-md-8
			p A binary search tree (BST) is a #[a(href = '/data-structures/trees') tree] with #[strong a degree of 2] whose nodes each store a #[strong key], which is usually linked to some associated value or record. For any given node, its key must be larger than the keys of all nodes in its left sub-tree, and smaller than the keys of all nodes in its right sub-tree.

			p As the name suggests, binary search trees are primarily used for #[strong search and retrieval of items in some ordered set].

		div.col-md-4
			div.thumbnail.pull-right
				img(src = '/images/binary-search-tree.png', width = '80%')
				div.caption
					p A binary search tree with nine nodes, rooted at 8.

	h2#efficiency Efficiency

	div.row
		div.col-md-6
			p Most operations use #[strong time proportional to the height of the tree]. In a #[a(href = '#balance') well-balanced] tree this is roughly#[code O(log n)] for a tree with #[code n] items, but it can be #[code O(n)] if the tree is completely unbalanced (in which case it would closely resemble a #[a(href = '/data-structures/linked-lists') linked list]).

		div.col-md-6
			table.table
				tr
					th
					th Average
					th Worst
				tr
					th Space
					td.text-mono O(n)
					td.text-mono O(n)
				tr
					th Search
					td.success.text-mono O(log n)
					td.danger.text-mono O(n)
				tr
					th Insert
					td.success.text-mono O(log n)
					td.danger.text-mono O(n)
				tr
					th Delete
					td.success.text-mono O(log n)
						td.danger.text-mono O(n)

	h2#operations Operations

	h3 Searching

	p A search in a binary tree starts from the root of the tree and compares the current key to the search key. If the keys match, the node is returned; if not, the algorithm repeats with the left child if the search key is less than the current key, or the right child if the search key is larger. When an empty sub-tree remains when the algorithm finishes, the search key was not found.

	div.row
		div.col-md-6
			h4 Recursive Searching, Java

			pre: code.java.
				Node searchRecursively(Node node, int key) {
					if (node == null || key == node.key) {
						return node;
					} else if (key < node.key) {
						return searchRecursively(node.left, key);
					} else { // key > node.key
						return searchRecursively(node.right, key);
					}
				}

		div.col-md-6
			h4 Iterative Searching, Java

			pre: code.java.
				Node searchIteratively(Node node, int key) {
					while (node != null) {
						if (key == node.key) {
							return node;
						} else if (key < node.key) {
							node = node.left;
						} else { // key > node.key
							node = node.right;
						}
					}

					return null;
				}

	p #[strong Node:] these methods should exist within some BST class and be called as follows:

	div.row
		div.col-md-6
			pre: code.java.
				Node search(int key) {
					return searchXYZ(root, key);
				}

	h3 Insertion

	p Insertion begins as a search would, moving through the tree to find a match for the key to be inserted (and therefore moving closer and closer to the position at which the new node will be created). Eventually an external node will be reached, at which point the new node will be appended as a left or right child, depending on the keys.

	div.row
		div.col-md-6
			h4 Recursive Insertion, Java

			pre: code.java.
				void insertRecursively(int key) {
					// insert a new node if the tree is empty
					if (root == null) {
						root = new Node(int key);
					}

					// otherwise recurse down the tree
					if (key == node.key) {
						// inserting a duplicate key has no effect
						return;
					} else if (key < node.key) {
						root.left = insertRecursively(root.left, key);
					} else { // key > node.key
						root.right = insertRecursively(root.right, key);
					}
				}

		div.col-md-6
			h4 Iterative Insertion, Java

			pre: code.java.
				void insertIteratively(int key) {
					// insert a new node if the tree is empty
					if (root == null) {
						root = new Node(int key);
						return;
					}

					// recurse downwards to find the node that
					// should be the new node's parent
					while ((key < root.key && root.left != null)
					|| (key > root.key && root.right != null)) {
						if (key < root.key) {
							root = root.left;
						} else { // key > root.key
							root = root.right;
						}
					}

					// append the node in the right place
					// (implicitly ignoring duplicate keys)
					if (key < root.key) {
						root.left = new Node(key);
					} else if (key > root.key) {
						root.right = new Node(key);
					}
				}

	p Note: these methods assume that they are within some BST class, with a pointer to the tree's root.

	h3 Deletion

	p There are three cases to consider when deleting from a BST: two simple cases and one that is more complex. The simple cases are:

	ul
		li Deleting a node with no children: simply remove it from the tree.
		li Deleting a node with one child: remove it from the tree and replace it with its child.

	p Deleting a node with two children is harder. First, call the node to be deleted #[code N], but do not delete it. Then find #[code N]'s #[a(href = '/algorithms/tree-traversals#in-order') in-order] predecessor or successor, call it #[code R], and swap the values of #[code N] and #[code R]. Now recursively delete #[code R] until one of the first two cases is reached.

	p In all BSTs, a node's in-order predecessor it its left sub-tree's right-most child, and a node's in-order successor is its right sub-tree's left-most child.

	div.row
		div.col-md-6
			h4 Main Delete Method

			pre: code.java.
				void delete(Node node, int key) {
					if (node == null) {
						// the key wasn't found
						return;
					} else if (key < node.key) {
						delete(node.left, key);
					} else if (key > node.key) {
						delete(node.right, key);
					} else { // the node has been found
						if (node.left == null && node.right == null) {
							// no children, so remove node
							replaceNodeInParent(node, null);
						} else if (node.right == null) {
							// left child only, so replace with child
							replaceNodeInParent(node, node.left);
						} else if (node.left == null) {
							// right child only, so replace with child
							replaceNodeInParent(node, node.right);
						} else {
							// two children
							Node successor = findLeftMost(node.right);
							node.key = successor.key;
							delete(successor, successor.key);
						}
					}
				}

		div.col-md-6
			h4 Helper Functions

			pre: code.java.
				void delete(int key) {
					delete(root, key);
				}

				Node findLeftMost(Node node) {
					while (node.left != null) {
						node = node.left;
					}
					return node;
				}

				void replaceNodeInParent(Node node, Node newNode) {
					if (node.parent != null) {
						if (node == node.parent.left) {
							node.parent.left = newNode;
						} else {
							node.parent.right = newNode;
						}
					}

					if (newNode != null) {
						newNode.parent = node.parent;
					}
				}

	h3 Traversal

	p See #[a(href = '/algorithms/tree-traversals') tree traversals].

	h3 Verification

	p Validating that a tree adheres to the the BST property has a simple recursive solution, but simply checking that #[code left < self < right] holds for every node #[strong is not enough]. Consider the tree below:

	div.row
		div.col-md-4.col-md-offset-4
			pre
				|       20
				|      /  \
				|    10    30
				|         /  \
				|        5    40

	p The naive check would confirm that #[code left < self < right] holds for every node, but 5 appears in the right sub-tree of 20, which incorrectly implies that #[code 5 > 20] and means that 5 would never be found in a search.

	p The solution below works by forcing the tree to be checked in a manner very similar to an #[a(href = '/algorithms/tree-traversals#in-order') in-order tree traversal] and maintaining a record of the last value that was seen. Because the values should always be seen in order, #[code lastSeen < currentKey] implies a correct BST.

	pre: code.java.
		int lastNodeChecked = -1; // assume values are constrained to 0 and above

		boolean checkBst() {
			if (root == null) return true;

			if (!checkBst(root.left)) return false;

			if (root.key <= lastNodeChecked) return false;
			lastNodeChecked = root.key;

			if (!checkBst(root.right)) return false;

			return true;
		}

	p An alternative approach performs a depth-first check on the tree, maintaining record of the acceptable minimum and maximum values for the current sub-tree.

	pre: code.java.
		boolean checkBst() {
			checkBst(root, Integer.MIN_VALUE, Integer.MAX_VALUE);
		}

		boolean checkBst(Node root, int min, int max) {
			if (root == null) true;

			if (root.key < min || root.key > max) return false;

			return checkBst(root.left, min, root.key - 1)
				&& checkBst(root.right, root.key + 1, max);
		}

	p #[strong Note:] as before, these methods assume that they are within some BST class, with a pointer to the tree's root.

	h2#balance Balance

	p A BST's balance is the extent to which the #[strong left and right sub-trees of any node are equal in size]. Balancing a BST minimises its height, which is important because most operations run in time proportional to the tree's height. For a well-balanced BST this means #[code O(log n)] performance, versus #[code O(n)] performance for a completely unbalanced tree (see below for examples).

	p #[a(href = '/data-structures/balanced-trees') Balanced trees] have built-in procedures to maintain balance without compromising the performance of insert/delete operations.

	p The two trees below contain the same elements and exhibit the best and worst cases for balance.

	div.row
		div.col-md-6
			h3 A Well-Balanced Tree

			pre
				|            50
				|          /    \
				|       25        75
				|      /  \      /  \
				|    10    30  60    90
				|&nbsp;
				|&nbsp;
				| n = 7, height = 3 (&asymp; log&#8322; n)

		div.col-md-6
			h3 A Poorly-Balanced Tree

			pre
				|                      90
				|                     /
				|                   75
				|                  /
				|                60
				|               /
				|             50
				|            /
				|          30
				|         /
				|       25
				|      /
				|    10
				|&nbsp;
				|&nbsp;
				| n = 7, height = 7
